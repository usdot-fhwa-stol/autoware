#!/bin/bash

#  Copyright (C) 2018-2021 LEIDOS.
# 
#  Licensed under the Apache License, Version 2.0 (the "License"); you may not
#  use this file except in compliance with the License. You may obtain a copy of
#  the License at
# 
#  http://www.apache.org/licenses/LICENSE-2.0
# 
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations under
#  the License.

# This scipt builds the Autoware.ai components used by the CARMA Platform

usage() { 
  echo "USAGE carma_autoware_build [OPTION]
  carma_autoware_build will build the Autoware.ai components used by the CARMA Platform
  
  -a Path to Autoware.ai workspace. If this is not specified it is assumed the current workspace will work
  -b Replace CMake build arguments for Autoware.ai's build
  -k Use catkin_make_isolated instead of colcon. Note: This will limit job count to 1
  -h Print help
  ";
}


# Default environment variables
autoware_src="$(realpath .)"
autoware_build_args=""
use_catkin=false
# The list of packages which are required by carma from autoware
AUTOWARE_PACKAGE_SELECTION="autoware_msgs map_tools lidar_localizer map_file deadreckoner points_downsampler points_preprocessor lane_planner waypoint_maker  autoware_config_msgs as waypoint_planner pure_pursuit twist_filter twist_gate lanelet2_extension vision_darknet_detect vision_beyond_track lidar_euclidean_cluster_detect range_vision_fusion imm_ukf_pda_track naive_motion_predict ekf_localizer detected_objects_visualizer calibration_publisher mpc_follower autoware_camera_lidar_calibrator multi_lidar_calibrator runtime_manager"

# Read Options
while getopts a:kthb: option
do
	case "${option}"
	in
		a) autoware_src="$(realpath ${OPTARG})";;
    b) autoware_build_args=${OPTARG};;
    k) use_catkin=true;;
    h) usage; exit 0;;
		\?) echo "Unknown option: -$OPTARG" >&2; exit 1;;
		:) echo "Missing option argument for -$OPTARG" >&2; exit 1;;
		*) echo "Unimplemented option: -$OPTARG" >&2; exit 1;;

	esac
done

echo "
Attempting to build Autoware
Autoware Source Dir: ${autoware_src}
"


echo "Building Autoware required packages ${AUTOWARE_PACKAGE_SELECTION}"

cd ${autoware_src}

if [[ -z ${autoware_build_args} ]]; then
  if [[ "${use_catkin}" = true ]]; then
    echo "Building release with catkin_make_isolated. NOTE: Formal releases should use colcon"
    catkin_make_isolated --source . --install --install-space ./ros/install -j1 --only-pkg-with-deps "${AUTOWARE_PACKAGE_SELECTION}"
  else
    # Default Build Behavior
    ./autoware/ros/colcon_release --executor sequential --install-base ./ros/install --packages-up-to ${AUTOWARE_PACKAGE_SELECTION}
  fi
else
  if [[ "${use_catkin}" = true ]]; then
    echo "Building with CMake args: ${autoware_build_args} and with catkin_make_isolated. NOTE: Formal releases should use colcon"
    catkin_make_isolated --source . --install --install-space ./ros/install -j1 --only-pkg-with-deps "${AUTOWARE_PACKAGE_SELECTION}" --cmake-args "${autoware_build_args}"
  else
    echo "Building with CMake args: ${autoware_build_args}"
    echo "Build with CUDA"
    AUTOWARE_COMPILE_WITH_CUDA=0 colcon build --cmake-args "${autoware_build_args}" --executor sequential --install-base ./ros/install --packages-up-to ${AUTOWARE_PACKAGE_SELECTION}
  fi
fi

source ./ros/install/setup.bash
echo "Autoware built successfuly. Binaries sourced from $(realpath ./ros/install/setup.bash)"

echo "Autoware Build Complete"
